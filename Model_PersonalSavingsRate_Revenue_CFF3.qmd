---
title: "Personal Savings Rate vs Actual Revenue -CFF3"
author: "UC Team"
format: html
editor: visual
---

```{r}
#| include: false

knitr::opts_chunk$set(
  fig.align = "center"
)

library(tidyverse)
library(lmtest)
library(tseries)
library(data.table)
library(dplyr)
library(tidyverse)
library(rmarkdown)
library(gapminder)
library(janitor)
library(lubridate)
library(scales)
library(gt)
library(patchwork)
library(kableExtra)
library(data.table)
library(corrplot)
library(zoo)
library(forecast)
library(fable)
library(feasts)
library(tsibble)
library(tseries)
library(ggplot2)
library(psych)
library(zoo)
library(gridExtra)
library(lmtest)
```

```{r}
#| echo: true
#| code-fold: true
#| warning: false
#| include: false



CFF_3 <- fread("C:\\Users\\varsh\\OneDrive\\Documents\\Graduate Case Studies\\Data\\CFF_3.csv", header = T)
#head(CFF_1)
# Aggregating CFF_1 on month level (Difference of Actuals & Predicted)
CFF_3_agg <- CFF_3 %>% group_by(`Model Date ID`, `Month Number`, `Transaction Type`) %>% summarize(Amount = sum(Amount))
CFF_3_agg_wider <- CFF_3_agg %>%
  pivot_wider(names_from = `Transaction Type`,values_from = Amount) %>%
  mutate(TotalRevenue= A)

CFF_3_agg_revenue <- CFF_3_agg_wider[,c(2,5)]

CFF_3_agg_revenue<-as.data.frame(CFF_3_agg_revenue)
base_date <- as.Date("2013-10-01")
Date <- base_date+ months(CFF_3_agg_revenue$`Month Number`-1)
CFF_3_agg_revenue <- data.frame(Date = Date,Revenue=CFF_3_agg_revenue$TotalRevenue)
CFF_3_agg_revenue

#Interest rate data
Savings <- fread("C:\\Users\\varsh\\OneDrive\\Documents\\Graduate Case Studies\\Data\\PSAVERT.csv")
Savings  <- Savings  %>%
  mutate(DATE = as.Date(as.character(DATE))) 
colnames(Savings ) <- c('Date','Savings ')

CFF_3_Savings_revenue <- merge(CFF_3_agg_revenue,Savings , by = "Date")
CFF_3_Savings_revenue
write.csv(CFF_3_Savings_revenue  ,"CFF_3_Savings_revenue.csv")
```

```{r}
#| echo: true
#| code-fold: true
#| warning: false
#| include: false
# Reading data
data <- fread("CFF_3_Savings_revenue.csv", header = T, fill = TRUE)

#head(data)
#summary(data)

data$V1 <- NULL
# Rename columns
colnames(data) <- c("time", "Revenue", "srate")
#head(data)

datanew <- data %>%
   mutate(time = yearmonth(time))

#head(datanew)
```

## Time Series plot of actual revenue - Variable Y

The revenue plot follows a decreasing trend

```{r}
#| echo: true
#| code-fold: true
#| warning: false
#Time series plot for Revenue
datanew %>%
    ggplot() +
    geom_line(aes(time,Revenue)) +
    theme_bw() +
    ggtitle("Time series plot of Revenue") +
    xlab("Time") +
    ylab("Revenue")
```

***The data is not stationery - does not pass the stationairty tests .***

```{r}
#| echo: true
#| code-fold: true
#| warning: false
#| include: false
# Calculate summary statistics
#head(datanew)

# ADF Test for y1
invisible(adf.test(datanew$Revenue))
#Non stationery because p value is greater than 0.05
# KPSS Test for y1
invisible(kpss.test(datanew$Revenue))
#Non stationery because p values <<0.05
```

```{r}
#| echo: true
#| code-fold: true
#| warning: false
#| include: false
#Checking for mean stationarity for Revenue column 
data_roll <- datanew %>%
  mutate(
    close_mean = zoo::rollmean(
      Revenue, 
      k = 12, 
      fill = NA),
    close_sd = zoo::rollapply(
      Revenue,  
      FUN = sd, 
      width = 12, 
      fill = NA)
  )

data_rollmean <- data_roll %>%
  ggplot() +
  geom_line(aes(time, Revenue)) +
  geom_line(aes(time, close_mean),color='blue') +
  theme_bw() +
  ggtitle("Mean of Difference  over time") +
  ylab("Revenue of actuals") +
  xlab("Time")
```

```{r}
#| echo: true
#| code-fold: true
#| warning: false
#| include: false
data_roll <- datanew %>%
  mutate(
    close_mean = zoo::rollmean(
      Revenue, 
      k = 12, 
      fill = NA),
    close_sd = zoo::rollapply(
      Revenue, 
      FUN = sd, 
      width = 12, 
      fill = NA)
  )
data_rollsd <- data_roll %>%
  ggplot() +
  geom_line(aes(time, close_sd)) +
  geom_smooth(aes(time,close_sd),method='lm',se=F)+
  theme_bw() +
  ggtitle("Rolling SD Revenue") +
  ylab("Revenue of actuals and predicted") +
  xlab("Year")
```

#### *wt=log(yt)*

```{r}
#| echo: true
#| code-fold: true
#| warning: false
data_trans <- datanew %>%
  mutate(data_log = log1p(Revenue)) 
  
#data_trans %>%
  #ggplot() +
  #geom_line(aes(time, data_log)) +
  #geom_line(aes(time, data_boxcox),color='blue') +
  #theme_bw() +
  #ggtitle("Transformed Revenue data") +
  #ylab("Revenue data transformed") +
  #xlab("Year")
```

#### *wd=log(y¬≠~t~)-log(y~t-1~)*

```{r}
#| echo: true
#| code-fold: true
#| warning: false
data_trans = datanew %>%
  mutate(data_log = log1p(Revenue),
  value_log_diff = data_log - lag(data_log))

data_trans %>%
  ggplot() +
  geom_line(aes(time, value_log_diff),color = 'blue') +
  theme_bw() +
  ggtitle("Transformed and differenced Revenue data") +
  ylab("Revenue data transformed and differenced") +
  xlab("Year")
```

***Variable y is now "stationary"***.

```{r}
#| echo: true
#| code-fold: true
#| warning: false
#| include: false

invisible(adf.test(na.omit(data_trans$value_log_diff)))
```

## Time Series plot of Variable X : Personal Savings Rate

Personal savings rate follows mostly an increasing trend after the sharp dips before 2017 and 2018.

```{r}
#| echo: true
#| code-fold: true
#| warning: false


#Time series plot for Mortgage rate
datanew %>%
    ggplot() +
    geom_line(aes(time,srate)) +
    theme_bw() +
    ggtitle("Time series plot of Savings rate") +
    xlab("Time") +
    ylab("Savings rate")
```

***Variable X is "non-stationary".***

```{r}
#| echo: true
#| code-fold: true
#| warning: false
#| include: false

# ADF Test for y2
adf.test(datanew$srate)
#Non stationery because p value is wayy greater than 0.05

# KPSS Test for y2
kpss.test(datanew$srate)
#Non stationery because p values <<0.05
```

```{r}
#| echo: true
#| code-fold: true
#| warning: false
#| include: false
#Checking for mean stationarity for Mortgage column 
data_roll <- datanew %>%
  mutate(
    close_mean_mrate = zoo::rollmean(
      srate, 
      k = 12, 
      fill = NA),
    close_sd_mrate = zoo::rollapply(
      srate, 
      FUN = sd, 
      width = 12, 
      fill = NA)
  )

data_rollmean_mrate <- data_roll %>%
  ggplot() +
  geom_line(aes(time, srate)) +
  geom_line(aes(time, close_mean_mrate),color='blue') +
  theme_bw() +
  ggtitle("Mean of Savings Rate over time") +
  ylab("Savings Rate") +
  xlab("Time")
```

```{r}
#| echo: true
#| code-fold: true
#| warning: false
#| include: false
data_roll <- datanew %>%
  mutate(
    close_mean_mrate = zoo::rollmean(
      srate, 
      k = 12, 
      fill = NA),
    close_sd_mrate = zoo::rollapply(
      srate, 
      FUN = sd, 
      width = 12, 
      fill = NA)
  )
data_rollsd <- data_roll %>%
  ggplot() +
  geom_line(aes(time, close_sd_mrate)) +
  geom_smooth(aes(time,close_sd_mrate),method='lm',se=F)+
  theme_bw() +
  ggtitle("Rolling SD of Savings Rate") +
  ylab("Savings Rate") +
  xlab("Year")

#data_rollsd
```

#### *wt=log(xt)*

```{r}
#| echo: true
#| code-fold: true
#| warning: false
data_trans_2 <- datanew %>%
  mutate(data_log_srate = log1p(srate)) 
  #mutate(data_boxcox_unemp = forecast::BoxCox(ratio, lambda = "auto"))
  
#data_trans_2 %>%
  #ggplot() +
  #geom_line(aes(time, data_log_srate)) +
  #geom_line(aes(time, data_boxcox_unemp),color='blue') +
  #theme_bw() +
  #ggtitle("Transformed savings rate data") +
  #ylab("Savings rate data transformed") +
  #xlab("Year")
```

#### *wd=log(xt)-log(xt-1)*

```{r}
#| echo: true
#| code-fold: true
#| warning: false

data_trans_2 = data_trans_2 %>%
  mutate(data_log_srate = log1p(srate),
  value_log_diff_srate = data_log_srate - lag(data_log_srate))

data_trans_2 %>%
  ggplot() +
  geom_line(aes(time, value_log_diff_srate),color = 'blue') +
  theme_bw() +
  ggtitle("Transformed and differenced Savings Rate") +
  ylab("Savings rate data transformed and differenced") +
  xlab("Year")
```

***Variable x is now "stationary"***.

```{r}
#| echo: true
#| code-fold: true
#| warning: false
#| include: false

adf.test(na.omit(data_trans_2$value_log_diff_srate))
```

```{r}
#| echo: true
#| code-fold: true
#| warning: false
#| include: false
data_final <- merge(data_trans, data_trans_2, by.x = 'time', by.y = 'time')
#head(data_final)
data_final$Revenue.y <- NULL
data_final$srate.y <- NULL
#data_final$data_log.y <- NULL
#data_final$value_log_diff.y <- NULL
#head(data_final)
colnames(data_final) <- c("time", "revenue", "srate", "value_log","value_log_diff", "value_log_srate", "value_log_diff_srate")
#head(data_final)
```

## Granger Causality, Model Summary and Inferences :

Per Savings Rate: xt <br>Revenue: yt <br>*Since both these series are nonstationary we have transformed them first before the Granger Causality test.* <br> Œîxt = log(xt) ‚àí log (xt-1) <br> Œîyt = log(ùë¶t) ‚àí log (ùë¶t-1) <br> xh = Œîxt <br> yh = Œîyt <br>

```{r}
#| echo: true
#| code-fold: true
#| warning: false

#Granger causality test
grangertest(value_log_diff ~ value_log_diff_srate, order = 4, data = data_final)

#Dynamic regression
yh <- embed(data_final$value_log_diff,4)
xh <- embed(data_final$value_log_diff_srate,4)
mh <- lm(yh[,1] ~ yh[,2:4] + xh)
summary(mh)

#ANOVA
mh2 <- lm(yh[,1] ~ yh[,2:4])
anova(mh, mh2)
```

***Therefore, we can conclude that*** because of the p-value of the Anova test between model 1 and 2, we can conclude that Personal Savings Rate does not Granger-cause actual revenue.
